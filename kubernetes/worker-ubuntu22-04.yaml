apiVersion: apps/v1
kind: Deployment
metadata:
  name: worker-ubuntu22-04
  namespace: buildbarn
  annotations:
    prometheus.io/port: "80"
    prometheus.io/scrape: "true"
spec:
  selector:
    matchLabels:
      app: worker
      instance: ubuntu22-04
  template:
    metadata:
      labels:
        app: worker
        instance: ubuntu22-04
    spec:
      nodeSelector:
        kubernetes.io/os: linux
        kubernetes.io/arch: amd64
      terminationGracePeriodSeconds: 300
      automountServiceAccountToken: false
      containers:
      - args:
        - /config/worker-ubuntu22-04.jsonnet
        image: ghcr.io/buildbarn/bb-worker:20230703T140711Z-7d7f8a9
        name: worker
        volumeMounts:
        - mountPath: /config/
          name: configs
          readOnly: true
        - mountPath: /worker
          name: worker
        ports:
        - name: metrics
          containerPort: 9980
          protocol: TCP
        resources:
          requests:
            cpu: 100m
            memory: 256Mi
        env:
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
      - command: [/bb/tini, -v, --, /bb/bb_runner, /config/runner-ubuntu22-04.jsonnet]
        image: ghcr.io/catthehacker/ubuntu:act-22.04@sha256:5f9c35c25db1d51a8ddaae5c0ba8d3c163c5e9a4a6cc97acd409ac7eae239448
        name: runner
        securityContext:
          runAsUser: 65534
          allowPrivilegeEscalation: false
        resources:
          requests:
            # Wildy unpredictable. Under-guesstimate cpu, over-guess
            # memory.  We ~want cpu to be best-effort and frequently
            # throttled. We still want to avoid oom crashes however.
            # TODO(gus): be able to spill into swap, rather than oom.
            cpu: 1000m
            memory: 3Gi
        volumeMounts:
        - mountPath: /config/
          name: configs
          readOnly: true
        - mountPath: /worker
          name: worker
        - mountPath: /bb
          name: bb-runner
          readOnly: true
      initContainers:
      - name: bb-runner-installer
        image: ghcr.io/buildbarn/bb-runner-installer:20230703T140711Z-7d7f8a9
        volumeMounts:
        - mountPath: /bb/
          name: bb-runner
      - name: volume-init
        image: public.ecr.aws/docker/library/busybox:1.36.1-uclibc
        command:
        - sh
        - -c
        - mkdir -pm 0777 /worker/build && mkdir -pm 0700 /worker/cache && chmod 0777 /worker
        volumeMounts:
        - mountPath: /worker
          name: worker
      volumes:
      - name: bb-runner
        emptyDir: {}
      - name: configs
        projected:
          sources:
          - configMap:
              name: runner-ubuntu22-04
              items:
              - key: runner-ubuntu22-04.jsonnet
                path: runner-ubuntu22-04.jsonnet
          - configMap:
              name: worker-ubuntu22-04
              items:
              - key: worker-ubuntu22-04.jsonnet
                path: worker-ubuntu22-04.jsonnet
          - configMap:
              name: common
              items:
              - key: common.libsonnet
                path: common.libsonnet
      - emptyDir: {}
        name: worker
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: worker-ubuntu22-04
  namespace: buildbarn
spec:
  minAvailable: "50%"
  selector:
    matchLabels:
      app: worker
      instance: ubuntu22-04
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: worker-ubuntu22-04
  namespace: buildbarn
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: worker-ubuntu22-04
  minReplicas: 1
  maxReplicas: 100
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 50
  behavior:
    scaleUp:
      stabilizationWindowSeconds: 30
      policies:
        - type: Percent
          value: 20
          periodSeconds: 60
    scaleDown:
      stabilizationWindowSeconds: 600
      policies:
        - type: Percent
          value: 10
          periodSeconds: 300
